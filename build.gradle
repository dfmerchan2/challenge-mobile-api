group 'co.com.yape'
version '1.0'
description = 'Automation Challenge Yape'

defaultTasks 'clean','test','aggregate'

buildscript {
    ext {
        javaFakerVersion = '1.0.2'
        lombokVersion = '1.18.26'
        seleniumVersion = '4.15.0'
        serenityVersion = '3.6.12'
        slf4jVersion = '2.0.5'
        junitVersion = '5.9.2'
        appiumVersion = '8.3.0'
        javafakerVersion = '1.0.2'
        logVersion = '2.0.5'
    }
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:3.3.0")
        classpath "org.seleniumhq.selenium:selenium-java:${seleniumVersion}"
    }
}

repositories {
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: "net.serenity-bdd.serenity-gradle-plugin"

dependencies {
    implementation "net.serenity-bdd:serenity-core:$serenityVersion"
    implementation "net.serenity-bdd:serenity-junit:$serenityVersion"
    implementation "net.serenity-bdd:serenity-screenplay:$serenityVersion"
    implementation "net.serenity-bdd:serenity-cucumber:$serenityVersion"
    implementation "net.serenity-bdd:serenity-screenplay-webdriver:$serenityVersion"
    implementation "net.serenity-bdd:serenity-screenplay-rest:$serenityVersion"
    implementation "net.serenity-bdd:serenity-ensure:$serenityVersion"
    implementation "net.serenity-bdd:serenity-reports:$serenityVersion"
    implementation "com.github.javafaker:javafaker:$javafakerVersion"
    implementation "io.appium:java-client:$appiumVersion"
    implementation "org.slf4j:slf4j-simple:$logVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperties = System.properties
    maxParallelForks = Runtime.runtime.availableProcessors()
}

gradle.startParameter.continueOnFailure = true
test.finalizedBy(aggregate)